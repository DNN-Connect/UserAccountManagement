-- no longer needed

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Connect_Accounts_GetUsers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}[{objectQualifier}Connect_Accounts_GetUsers]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Connect_Accounts_GetRoleMembers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}[{objectQualifier}Connect_Accounts_GetRoleMembers]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Connect_Accounts_SearchUsers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    drop procedure {databaseOwner}[{objectQualifier}Connect_Accounts_SearchUsers]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Connect_Users]') and OBJECTPROPERTY(id, N'IsView') = 1)
    drop View {databaseOwner}[{objectQualifier}vw_Connect_Users]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Connect_Users]
AS

		WITH ProfileProperties (_uid, PropertyName, PropertyValue) 
		AS 
			( 
				SELECT up.UserID as _uid, PropertyName, up.PropertyValue 
				FROM {databaseOwner}[{objectQualifier}UserProfile] UP
				INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] PPD ON UP.PropertyDefinitionID = PPD.PropertyDefinitionID 
			) 
	
			SELECT 
				 X.UserId,
				 X.Username,
				 X.FirstName,
				 X.LastName,
				 X.DisplayName,
			   UP.CreatedDate,
				 X.Email,
			    UP.PortalId,
				 X.PostalCode,
				 X.City,
				 X.Country,
				 X.Telephone,
				 X.PreferredLocale,
				AM.LastLoginDate,
				 X.IsSuperUser,
				UP.IsDeleted,
				'' as Status,
				'' as RoleId
			FROM 
				{databaseOwner}[{objectQualifier}Users] U 
				INNER JOIN ProfileProperties PP ON U.UserID = PP._uid 
				PIVOT (MAX(PropertyValue) FOR PP.PropertyName IN ( [Unit], [Street], [City], [Region], [Country], [PostalCode], [Telephone], [Cell], [TimeZone], [PreferredLocale], [PreferredTimeZone], [Photo])) X 
				INNER JOIN {databaseOwner}[aspnet_Users] AU ON AU.UserName = X.Username
				INNER JOIN {databaseOwner}[aspnet_Membership] AM ON am.UserId = AU.UserId 
				LEFT JOIN {databaseOwner}[{objectQualifier}UserPortals] UP 
					ON CASE WHEN X.IsSuperuser = 1 THEN 0 ELSE X.UserId END = UP.UserId

GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Connect_Accounts_GetUsers]
	@RoleId int,
	@PortalId int
AS
SELECT DISTINCT
	* 
FROM
	{objectQualifier}vw_Connect_Users
WHERE
	(
		(IsDeleted = 1 and @RoleId = -2) 
		OR
		(IsSuperUser = 1 and @RoleId = -1) 
		or
		((@RoleId > -1) and ([UserID] in(Select [UserId] from {databaseOwner}[{objectQualifier}UserRoles] where [RoleID] = @RoleId)) and IsSuperUser = 0)
	)
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Connect_Accounts_SearchUsers]
	@RoleId int,
	@PortalId int,
	@SearchText nvarchar(256),
	@SearchCols nvarchar(256)	
AS
SELECT DISTINCT
	U.*
FROM
	{databaseOwner}[{objectQualifier}UserProfile] UP
	INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] PD on PD.[PropertyDefinitionID] = UP.[PropertyDefinitionID]
	Inner JOIN {databaseOwner}[{objectQualifier}vw_Connect_Users] U on U.UserId = UP.UserID
WHERE
	(
		(UP.[PropertyValue] Like '%' + @SearchText + '%' And (PatIndex('%' + PD.[PropertyName] + '%' , @SearchCols) > 0))

		OR
		(
				(U.[FirstName] Like '%' + @SearchText + '%' and PATINDEX('%FirstName%', @SearchCols) > 0)
				OR
				(U.[LastName] Like '%' + @SearchText + '%' and PATINDEX('%LastName%', @SearchCols) > 0)		
				OR
				(U.[DisplayName] Like '%' + @SearchText + '%' and PATINDEX('%DisplayName%', @SearchCols) > 0)				
				OR
				(U.[Email] Like '%' + @SearchText + '%' and PATINDEX('%Email%', @SearchCols) > 0)						
				OR
				(U.[Username] Like '%' + @SearchText + '%' and PATINDEX('%Username%', @SearchCols) > 0)	
		)

	)
AND
	U.PortalId = @PortalId
AND
	(
		(IsDeleted = 1 and @RoleId = -2) 
		OR
		(IsSuperUser = 1 and @RoleId = -1) 
		or
		((@RoleId > -1) and (U.[UserID] in(Select [UserId] from {databaseOwner}[{objectQualifier}UserRoles] where [RoleID] = @RoleId)) and IsSuperUser = 0)
	)
GO

if not exists (select 1 from {databaseOwner}[{objectQualifier}Lists] where ListName='DataType' and Value='CheckboxList')
begin
	INSERT INTO {databaseOwner}[{objectQualifier}Lists] ([ListName],[Value],[Text],
		[ParentID],[Level],[SortOrder],[DefinitionID],[PortalID],[SystemList])
	VALUES('DataType','CheckboxList','Connect.Libraries.UserManagement.CheckboxListEditControl, Connect.Libraries.UserManagement',
		0,0,0,-1,-1,1)
end
GO
