'***********************************************************************************
'  Connect UsersLibrary
'
'  Copyright (C) 2013-2014 DNN-Connect Association, Philipp Becker
'  http://dnn-connect.org
'  
'  This program is free software; you can redistribute it and/or
'  modify it under the terms of the GNU General Public License
'  as published by the Free Software Foundation; either version 2
'  of the License, or (at your option) any later version.
'  
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'  
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software
'  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
'
'***********************************************************************************

Imports DotNetNuke
Imports DotNetNuke.Entities.Users

Imports DotNetNuke.Common
Imports DotNetNuke.Common.Utilities
Imports System.Web.UI.WebControls

Imports DotNetNuke.Entities.Modules
Imports System.Web.UI
Imports DotNetNuke.Entities.Profile
Imports System
Imports DotNetNuke.Framework
Imports DotNetNuke.Services.Localization
Imports System.Data
Imports System.Collections.Generic

Imports Microsoft.VisualBasic
Imports System.Text
Imports DotNetNuke.Entities.Tabs
Imports DotNetNuke.Services.FileSystem
Imports DotNetNuke.UI.WebControls
Imports DotNetNuke.Web.UI.WebControls

Imports Telerik.Web.UI


Namespace Connect.Libraries.UserManagement
    Public Class ConnectUsersModuleBase
        Inherits PortalModuleBase

#Region "Enumerations"

        Protected Enum UsernameUpdateMode
            UserSelect 'user selects the username himself
            FirstLetterLastname 'username autogenerated, username = f.lastname
            FirstnameLastname 'username autogenerated, username = firstname.lastname
            Lastname 'username autogenerated, lastname = username
            Email 'username autogenerated, email = username
        End Enum

        Protected Enum DisplaynameUpdateMode
            UserSelect 'user selects the displayname himself
            FirstLetterLastname 'autogenerated, (F.Lastname)
            FirstnameLastname 'autogenerated (Firstname Lastname)
            Lastname 'username autogenerated, (Lastname)
            Email 'autogenerated, (email address)
        End Enum

#End Region

#Region "Registration Control Settings"

        Protected ReadOnly Property CompareFirstNameLastName() As Boolean
            Get
                If Not Settings("CompareFirstNameLastName") Is Nothing Then
                    Return CType(Settings("CompareFirstNameLastName"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property ValidateEmailThroughRegex() As Boolean
            Get
                If Not Settings("ValidateEmailThroughRegex") Is Nothing Then
                    Return CType(Settings("ValidateEmailThroughRegex"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property EmailRegex() As String
            Get
                If Not Settings("EmailRegex") Is Nothing Then
                    Return CType(Settings("EmailRegex"), String)
                End If
                Return Null.NullString
            End Get
        End Property

        Protected ReadOnly Property AdditionalControls() As String()
            Get
                Dim strControls As String() = New String() {}

                If Not String.IsNullOrWhiteSpace(Settings("AdditionalControls")) Then
                    Try
                        strControls = Convert.ToString(Settings("AdditionalControls")).Split(Char.Parse(";"))
                    Catch
                    End Try
                End If

                Return strControls
            End Get
        End Property

        Protected ReadOnly Property ExportFieldHeaders() As String()
            Get

                Dim strPropArray As String() = New String() {}
                Dim strProps As String = "User_UserId,User_Username,User_Firstname,User_Lastname,User_Email,User_CreatedDate,User_LastLoginDate,"

                Dim props As ProfilePropertyDefinitionCollection = ProfileController.GetPropertyDefinitionsByPortal(PortalSettings.PortalId)
                For Each prop As ProfilePropertyDefinition In props
                    If Not String.IsNullOrEmpty(Localization.GetString(prop.PropertyName, ProfileResourcefile)) Then
                        strProps += Localization.GetString(prop.PropertyName, ProfileResourcefile) & ","
                    Else
                        strProps += prop.PropertyName & ","
                    End If
                Next

                If Not Settings("ExportFields") Is Nothing Then
                    If Not String.IsNullOrEmpty(CType(Settings("ExportFields"), String)) Then
                        strProps = ""
                        Try

                            Dim strValue As String = Convert.ToString(Settings("ExportFields"))

                            For Each sValue As String In strValue.Split(Char.Parse(","))
                                If sValue.Trim.Length > 0 Then
                                    If Not String.IsNullOrEmpty(Localization.GetString("ProfileProperties_" & sValue & ".Text", ProfileResourcefile)) Then
                                        strProps += Localization.GetString("ProfileProperties_" & sValue & ".Text", ProfileResourcefile) & ","
                                    Else
                                        strProps += sValue & ","
                                    End If
                                End If
                            Next

                        Catch
                        End Try

                    End If

                End If

                Return strProps.Split(Char.Parse(","))
            End Get
        End Property

        Protected ReadOnly Property ExportFields() As String()
            Get
                Dim strPropArray As String() = New String() {}
                Dim strProps As String = "User_UserId,User_Username,User_Firstname,User_Lastname,User_Email,User_CreatedDate,User_LastLoginDate,"

                Dim props As ProfilePropertyDefinitionCollection = ProfileController.GetPropertyDefinitionsByPortal(PortalSettings.PortalId)
                For Each prop As ProfilePropertyDefinition In props
                    strProps += prop.PropertyName & ","
                Next

                If Not Settings("ExportFields") Is Nothing Then
                    Try
                        Dim strValue As String = Convert.ToString(Settings("ExportFields"))
                        If strValue.Trim.Length > 0 Then
                            strPropArray = strValue.Split(Char.Parse(","))
                        End If
                    Catch
                    End Try
                End If

                If strPropArray.Length > 0 Then
                    Return strPropArray
                End If

                Return strProps.Split(Char.Parse(","))
            End Get
        End Property

        Protected ReadOnly Property ShowUserDetailTabs() As String()
            Get
                Dim strControls As String() = New String() {"Account", "Password", "Profile", "Roles", "Email", "Sites"}

                If Not Settings("ShowUserDetailTabs") Is Nothing Then
                    Try
                        Dim strValue As String = Convert.ToString(Settings("ShowUserDetailTabs"))
                        If strValue.Length > 0 Then
                            strControls = strValue.Split(Char.Parse(","))
                        End If
                    Catch
                    End Try
                End If

                Return strControls
            End Get
        End Property

        Protected ReadOnly Property LoginWithEmail() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("LoginWithEmail")) Then
                    Return CType(Settings("LoginWithEmail"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property PreSelectRole() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("PreSelectRole")) Then
                    Return CType(Settings("PreSelectRole"), Integer)
                End If
                Return Null.NullInteger
            End Get
        End Property

        Protected ReadOnly Property AllowReports() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("AllowReports")) Then
                    Return CType(Settings("AllowReports"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property ExternalInterface() As String
            Get
                If Not Settings("ExternalInterface") Is Nothing Then
                    Return CType(Settings("ExternalInterface"), String)
                End If
                Return Null.NullString
            End Get
        End Property

        Protected ReadOnly Property AllowedRoles() As String()
            Get
                If Not Settings("AllowedRoles") Is Nothing Then
                    Return CType(Settings("AllowedRoles"), String).Split(Char.Parse(";"))
                End If
                Return Nothing
            End Get
        End Property

        Protected ReadOnly Property AllowExport() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("AllowExport")) Then
                    Return CType(Settings("AllowExport"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property AllowMessageUsers() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("AllowMessageUsers")) Then
                    Return CType(Settings("AllowMessageUsers"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property AllowCreate() As Boolean
            Get
                If DotNetNuke.Security.Membership.MembershipProvider.Instance().RequiresQuestionAndAnswer Then
                    Return False
                End If

                If Not String.IsNullOrEmpty(Settings("AllowCreate")) Then
                    Return CType(Settings("AllowCreate"), Boolean)
                End If

                Return False
            End Get
        End Property

        Protected ReadOnly Property AllowHardDelete() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("AllowHardDelete")) Then
                    Return CType(Settings("AllowHardDelete"), Boolean)
                End If
                Return False
            End Get
        End Property

        Protected ReadOnly Property AllowDelete() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("AllowDelete")) Then
                    Return CType(Settings("AllowDelete"), Boolean)
                End If
                Return False
            End Get
        End Property

        Protected ReadOnly Property UsernameMode() As UsernameUpdateMode
            Get
                If Not Settings("ShowUserName") Is Nothing Then
                    Select Case CType(Settings("ShowUserName"), String)
                        Case "EMAIL"
                            Return UsernameUpdateMode.Email
                        Case "FIRSTLETTER.LASTNAME"
                            Return UsernameUpdateMode.FirstLetterLastname
                        Case "FIRSTNAME.LASTNAME"
                            Return UsernameUpdateMode.FirstnameLastname
                        Case "LASTNAME"
                            Return UsernameUpdateMode.Lastname
                        Case Else
                            Return UsernameUpdateMode.UserSelect
                    End Select
                End If
                Return UsernameUpdateMode.UserSelect
            End Get
        End Property

        Protected ReadOnly Property DisplaynameMode() As DisplaynameUpdateMode
            Get
                If Not Settings("ShowDisplayName") Is Nothing Then
                    Select Case CType(Settings("ShowDisplayName"), String)
                        Case "EMAIL"
                            Return DisplaynameUpdateMode.Email
                        Case "FIRSTLETTER.LASTNAME"
                            Return DisplaynameUpdateMode.FirstLetterLastname
                        Case "FIRSTNAME.LASTNAME"
                            Return DisplaynameUpdateMode.FirstnameLastname
                        Case "LASTNAME"
                            Return DisplaynameUpdateMode.Lastname
                        Case Else
                            Return DisplaynameUpdateMode.UserSelect
                    End Select
                End If
                Return DisplaynameUpdateMode.UserSelect
            End Get
        End Property

        Protected ReadOnly Property RedirectAfterSubmit() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("RedirectAfterSubmit")) Then
                    Return CType(Settings("RedirectAfterSubmit"), Integer)
                End If
                Return Null.NullInteger
            End Get
        End Property

        Protected ReadOnly Property RedirectAfterLogin() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("RedirectAfterLogin")) Then
                    Return CType(Settings("RedirectAfterLogin"), Integer)
                End If
                Return Null.NullInteger
            End Get
        End Property

        Protected ReadOnly Property NotifyRole() As String
            Get
                If Not Settings("NotifyRole") Is Nothing Then
                    Return CType(Settings("NotifyRole"), String)
                End If
                Return Null.NullString
            End Get
        End Property

        Protected ReadOnly Property NotifyUser() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("NotifyUser")) Then
                    Return CType(Settings("NotifyUser"), Boolean)
                End If
                Return False
            End Get
        End Property

        Protected ReadOnly Property IncludeHeaders() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("IncludeHeaders")) Then
                    Return CType(Settings("IncludeHeaders"), Boolean)
                End If
                Return True
            End Get
        End Property

        Protected ReadOnly Property AddToRoleOnSubmit() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("AddToRoleOnSubmit")) Then
                    Try
                        Return CType(Settings("AddToRoleOnSubmit"), Integer)
                    Catch ex As Exception
                    End Try
                End If
                Return Null.NullInteger
            End Get
        End Property

        Protected ReadOnly Property RemoveFromRoleOnSubmit() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("RemoveFromRoleOnSubmit")) Then
                    Try
                        Return CType(Settings("RemoveFromRoleOnSubmit"), Integer)
                    Catch ex As Exception
                    End Try
                End If
                Return Null.NullInteger
            End Get
        End Property

        Protected ReadOnly Property AddToRoleStatus() As String
            Get
                If Not Settings("AddToRoleStatus") Is Nothing Then
                    Try
                        Return CType(Settings("AddToRoleStatus"), String)
                    Catch ex As Exception
                    End Try
                End If
                Return "pending"
            End Get
        End Property

        Protected ReadOnly Property ReCaptchaKey() As String
            Get
                If Not Settings("ReCaptchaKey") Is Nothing Then
                    Try
                        Return CType(Settings("ReCaptchaKey"), String)
                    Catch ex As Exception
                    End Try
                End If
                Return ""
            End Get
        End Property

        Protected ReadOnly Property FilterByRole() As String
            Get
                If Not Settings("FilterByRole") Is Nothing Then
                    Return CType(Settings("FilterByRole"), String)
                End If
                Return Null.NullString
            End Get
        End Property

        Protected ReadOnly Property PreloadList() As Boolean
            Get
                If Not String.IsNullOrEmpty(Settings("PreloadList")) Then
                    Return CType(Settings("PreloadList"), Boolean)
                End If
                Return False
            End Get
        End Property

        Protected ReadOnly Property FilterSelectByRole() As Integer
            Get
                If Not String.IsNullOrEmpty(Settings("FilterSelectByRole")) Then
                    Return CType(Settings("FilterSelectByRole"), Integer)
                End If
                Return Null.NullInteger
            End Get
        End Property

        Public ReadOnly Property UsermanagementTab() As Integer
            Get
                If CType(Settings("UsermanagementTab"), String) <> "" Then
                    Return CType(Settings("UsermanagementTab"), Integer)
                End If
                Return PortalSettings.HomeTabId
            End Get
        End Property

        Public ReadOnly Property ModuleTheme() As String
            Get
                If Settings.Contains("ModuleTheme") Then
                    Return CType(Settings("ModuleTheme"), String)
                Else
                    Return "Default"
                End If
            End Get
        End Property

#End Region

#Region "Common Properties"

        Public ReadOnly Property CurrentLocale() As String
            Get
                Return CType(Page, PageBase).PageCulture.Name
            End Get
        End Property

        Protected ReadOnly Property ProfileResourcefile() As String
            Get
                Return ResolveUrl("~/Desktopmodules/Admin/Security/App_LocalResources/Profile.ascx")
            End Get
        End Property

        Protected ReadOnly Property User() As Entities.Users.UserInfo
            Get
                Dim oUser As UserInfo = Nothing
                If Not Request.QueryString("uid") Is Nothing Then
                    If Microsoft.VisualBasic.IsNumeric(Request.QueryString("uid")) Then
                        oUser = UserController.GetUserById(PortalId, Convert.ToInt32(Request.QueryString("uid")))
                    End If
                Else
                    oUser = UserController.GetCurrentUserInfo()
                End If
                Return oUser
            End Get
        End Property

        Public ReadOnly Property IsUser() As Boolean
            Get
                If Not User Is Nothing Then
                    If User.UserID = UserInfo.UserID Then
                        Return True
                    End If
                End If
                Return False
            End Get
        End Property

        Public ReadOnly Property IsAdmin() As Boolean
            Get
                Return UserInfo.IsInRole(PortalSettings.AdministratorRoleName)
            End Get
        End Property

        Public ReadOnly Property TemplateBasePath() As String
            Get
                Return Server.MapPath(Me.TemplateSourceDirectory & "/Templates/")
            End Get
        End Property

        Public Function GetTemplate(SelectedTheme As String, TemplateName As String, Locale As String, CreateIfNotExists As Boolean) As String

            'make sure the basepath is not in the theme name. That way we can use it also from the view controls...
            SelectedTheme = SelectedTheme.ToLower.Replace(TemplateBasePath.ToLower, "")

            Dim path As String = TemplateBasePath & SelectedTheme & "\" & TemplateName.Replace(Constants.TemplateName_Extension, "." & Locale & Constants.TemplateName_Extension)

            If PortalSettings.DefaultLanguage.ToLower = Locale.ToLower Or String.IsNullOrEmpty(Locale) Then
                path = TemplateBasePath & SelectedTheme & "\" & TemplateName
            End If

            If System.IO.File.Exists(path) Then
                Return TemplateController.GetTemplate(path)
            End If

            If CreateIfNotExists Then
                Dim sourcePath As String = SelectedTheme & "\" & TemplateName
                Dim targetPath As String = SelectedTheme & "\" & TemplateName.Replace(Constants.TemplateName_Extension, "." & Locale & Constants.TemplateName_Extension)

                If PortalSettings.DefaultLanguage.ToLower = Locale.ToLower Or String.IsNullOrEmpty(Locale) Then
                    targetPath = SelectedTheme & "\" & TemplateName
                End If

                Try
                    System.IO.File.Copy(sourcePath, targetPath, True)
                    Return TemplateController.GetTemplate(targetPath)
                Catch
                End Try
            End If

            If Not System.IO.File.Exists(path) Then
                path = TemplateBasePath & TemplateBasePath & "Default\" & TemplateName
            End If

            Return TemplateController.GetTemplate(path)

        End Function

#End Region

#Region "Shared Helper Methods"

        Protected Function IsValidUserAttribute(ByVal Attribute As String, ByVal objRoot As Control) As Boolean

            Dim id As String = ""
            Select Case Attribute
                Case Constants.User_Username
                    id = Constants.ControlId_Username
                Case Constants.User_Displayname
                    id = Constants.ControlId_Displayname
                Case Constants.User_Firstname
                    id = Constants.ControlId_Firstname
                Case Constants.User_Lastname
                    id = Constants.ControlId_Lastname
                Case Constants.User_PasswordCurrent
                    id = Constants.ControlId_PasswordCurrent
                Case Constants.User_Password1
                    id = Constants.ControlId_Password1
                Case Constants.User_Password2
                    id = Constants.ControlId_Password2
                Case Constants.User_Email
                    id = Constants.ControlId_Email
                Case Constants.User_PasswordQuestion
                    id = Constants.ControlId_PasswordQuestion
                Case Constants.User_PasswordAnswer
                    id = Constants.ControlId_PasswordAnswer
            End Select

            Dim txtbox As TextBox = CType(FindControlRecursive(objRoot, objRoot.ID & "_" & id), TextBox)
            If Not txtbox Is Nothing Then
                If txtbox.Text <> "" Then
                    If id = Constants.ControlId_Email Then
                        Return IsValidEmail(txtbox.Text)
                    Else
                        Return True
                    End If
                End If
            End If
            Return False

        End Function

        Protected Function IsValidEmail(ByVal strEmail As String) As Boolean

            If ValidateEmailThroughRegex = False Then
                Return True
            End If

            If Not String.IsNullOrEmpty(EmailRegex) Then
                Return Regex.IsMatch(strEmail, EmailRegex)
            End If

            Dim settings As Hashtable = UserController.GetUserSettings(PortalId)
            Dim regexString As String = settings("Security_EmailValidation")
            Return Regex.IsMatch(strEmail, regexString)

        End Function

        Protected Function IsValidProperty(ByVal objUser As UserInfo, ByVal ProfProperty As ProfilePropertyDefinition, ByRef objControl As Control) As Boolean

            If ProfProperty.Required = False Then
                Return True
            End If

            Dim ctl As Control = GetPropertyControl(ProfProperty, objControl)
            If Not ctl Is Nothing Then

                If TypeOf (ctl) Is Telerik.Web.UI.RadComboBox Then
                    If CType(ctl, Telerik.Web.UI.RadComboBox).Text <> "" Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is TextBox Then
                    If CType(ctl, TextBox).Text <> "" Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDateTimePicker Then
                    If Not CType(ctl, Telerik.Web.UI.RadDateTimePicker).DbSelectedDate Is Nothing Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDatePicker Then
                    If Not CType(ctl, Telerik.Web.UI.RadDatePicker).DbSelectedDate Is Nothing Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadNumericTextBox Then
                    If CType(ctl, RadNumericTextBox).Value >= 0 Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnImageEditControl Then
                    If CType(ctl, DotNetNuke.Web.UI.WebControls.DnnImageEditControl).Value <> "" Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnFileEditControl Then
                    If CType(ctl, DotNetNuke.Web.UI.WebControls.DnnFileEditControl).Value <> "" Then
                        Return True
                    Else
                        Return False
                    End If
                ElseIf TypeOf (ctl) Is CheckBox Then
                    If Not CType(ctl, CheckBox).Checked = False Then
                        Return True
                    Else
                        Return False
                    End If
                End If

            End If

            Return True

        End Function

        Protected Function GetPropertyType(ByVal TypeId As Integer) As String
            Dim lc As New DotNetNuke.Common.Lists.ListController
            Dim entry As Lists.ListEntryInfo = lc.GetListEntryInfo(TypeId)
            If Not entry Is Nothing Then
                Return entry.Value
            End If
            Return ""
        End Function

        Public Function FindControlRecursive(ByVal objRoot As Control, ByVal id As String) As Control
            If objRoot.ID = id Then
                Return objRoot
            End If
            For Each c As Control In objRoot.Controls
                Dim t As Control = FindControlRecursive(c, id)
                If Not t Is Nothing Then
                    Return t
                End If
            Next
            Return Nothing
        End Function

        Public Function FindMembershipControlsRecursive(ByVal objRoot As Control, ByVal id As String) As Control
            If Not objRoot.ID Is Nothing AndAlso objRoot.ID.StartsWith(id) Then
                Return objRoot
            End If
            For Each c As Control In objRoot.Controls
                Dim t As Control = FindMembershipControlsRecursive(c, id)
                If Not t Is Nothing Then
                    Return t
                End If
            Next
            Return Nothing
        End Function

#End Region

#Region "Shared DataAccess Helpers"

        Protected Function GetPropertyValueList(ByVal PropertyDefinition As ProfilePropertyDefinition) As List(Of String)

            Dim lst As List(Of String) = Nothing

            If Not DataCache.GetCache("dnnwerk_ValueList_" & PropertyDefinition.PropertyDefinitionId.ToString) Is Nothing Then
                lst = CType(DataCache.GetCache("dnnwerk_ValueList_" & PropertyDefinition.PropertyDefinitionId.ToString), List(Of String))
            End If

            If lst Is Nothing Then

                lst = New List(Of String)

                Dim dr As IDataReader = Nothing
                If FilterSelectByRole = Null.NullInteger Then
                    dr = DotNetNuke.Data.DataProvider.Instance().ExecuteReader("dnnWerk_Users_GetValueList", PropertyDefinition.PropertyDefinitionId, DBNull.Value)
                Else
                    dr = DotNetNuke.Data.DataProvider.Instance().ExecuteReader("dnnWerk_Users_GetValueList", PropertyDefinition.PropertyDefinitionId, FilterSelectByRole)
                End If

                If Not dr Is Nothing Then
                    While dr.Read
                        Dim strValueSimpliefied As String = Convert.ToString(dr("PropertyValue"))

                        If strValueSimpliefied.Contains(",") Then
                            Dim strValue As String() = strValueSimpliefied.Split(Char.Parse(","))
                            For Each strItem As String In strValue

                                If strItem.Trim.Length > 0 Then
                                    If Not lst.Contains(strItem) Then
                                        lst.Add(strItem)
                                    End If
                                End If
                            Next
                        Else
                            If Not lst.Contains(strValueSimpliefied) Then
                                If strValueSimpliefied.Trim.Length > 0 Then
                                    lst.Add(strValueSimpliefied)
                                End If
                            End If
                        End If
                    End While

                    dr.Close()
                    dr.Dispose()

                    'DataCache.SetCache("dnnwerk_ValueList_" & PropertyDefinition.PropertyDefinitionId.ToString, lst)
                End If

            End If

            Return lst

        End Function

#End Region

#Region "Shared Template Processing Methods"

        Protected Sub ProcessDisplayTemplate(ByRef plhControls As ControlCollection, ByVal objItem As UserInfo, ByVal Template As String)

            Dim literal As New Literal
            Dim delimStr As String = "[]"
            Dim delimiter As Char() = delimStr.ToCharArray()

            Dim templateArray As String()
            templateArray = Template.Split(delimiter)

            For iPtr As Integer = 0 To templateArray.Length - 1 Step 2

                Dim strHTML As String = templateArray(iPtr).ToString()
                plhControls.Add(New LiteralControl(strHTML))

                If iPtr < templateArray.Length - 1 Then

                    Dim strToken As String = templateArray(iPtr + 1)

                    Select Case strToken

                        Case "USERID"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.UserID.ToString
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "USERNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.Username.ToString
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "CREATEDDATE"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.CreatedOnDate.ToLongDateString
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "CREATEDDATELONG"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.CreatedOnDate.ToLongDateString
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "FIRSTNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.FirstName
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "LASTNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.LastName
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "EMAIL"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.Email
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "DISPLAYNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem.DisplayName
                                objLiteral.EnableViewState = False
                                plhControls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case Else

                            If (strToken.StartsWith("PROFILE:")) Then

                                Dim strProperty As String = strToken.Substring(8, strToken.Length - 8)

                                Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strProperty)
                                If Not prop Is Nothing Then

                                    AddPropertyValue(plhControls, prop, objItem)

                                End If

                            End If

                    End Select

                End If

            Next

        End Sub

        Protected Sub ProcessDisplayTemplate(ByRef plhControls As PlaceHolder, ByVal objItem As DataRowView, ByVal Template As String)

            Dim literal As New Literal
            Dim delimStr As String = "[]"
            Dim delimiter As Char() = delimStr.ToCharArray()

            Dim templateArray As String()
            templateArray = Template.Split(delimiter)

            For iPtr As Integer = 0 To templateArray.Length - 1 Step 2

                Dim strHTML As String = templateArray(iPtr).ToString()
                plhControls.Controls.Add(New LiteralControl(strHTML))

                If iPtr < templateArray.Length - 1 Then

                    Dim strToken As String = templateArray(iPtr + 1)

                    Select Case strToken

                        Case "USERID"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("UserId")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "USERNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("Username")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "CREATEDDATE"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = Convert.ToDateTime(objItem("CreatedDate")).ToLongDateString
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "CREATEDDATELONG"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = Convert.ToDateTime(objItem("CreatedDate")).ToLongDateString
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "FIRSTNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("FirstName")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "LASTNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("LastName")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "EMAIL"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("Email")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case "DISPLAYNAME"

                            Try
                                Dim objLiteral As New Literal
                                objLiteral.Text = objItem("DisplayName")
                                objLiteral.EnableViewState = False
                                plhControls.Controls.Add(objLiteral)
                            Catch ex As Exception

                            End Try

                        Case Else

                            If (strToken.StartsWith("PROFILE:")) Then

                                Dim strProperty As String = strToken.Substring(8, strToken.Length - 8)

                                Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strProperty)
                                If Not prop Is Nothing Then

                                    AddPropertyValue(plhControls, prop, objItem)

                                End If

                            End If

                    End Select

                End If

            Next

        End Sub

        Protected Sub ProcessFormTemplate(ByRef plhControls As PlaceHolder, ByVal Template As String, ByVal objUser As UserInfo)

            plhControls.Controls.Clear()
            Dim strIdent As String = plhControls.ID & "_"

            Dim literal As New Literal
            Dim delimStr As String = "[]"
            Dim delimiter As Char() = delimStr.ToCharArray()

            Dim templateArray As String()
            templateArray = Template.Split(delimiter)

            For iPtr As Integer = 0 To templateArray.Length - 1 Step 2

                Dim strHTML As String = templateArray(iPtr).ToString()
                plhControls.Controls.Add(New LiteralControl(strHTML))

                If iPtr < templateArray.Length - 1 Then

                    Dim strToken As String = templateArray(iPtr + 1)

                    If strToken.StartsWith("DNNLBL:") Then 'rendering a dnn label control with help icons etc...

                        Dim strObject As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strKey As String = strToken.Split(Char.Parse(":"))(2)
                        Dim strTargetControlId As String = ""
                        Dim strLabelText As String = ""
                        Dim strHelpText As String = ""
                        Dim strCssClass = ""
                        Dim prop As ProfilePropertyDefinition = Nothing

                        Select Case strObject.ToLower

                            Case "static"

                                strLabelText = strKey
                                Try
                                    strHelpText = strToken.Split(Char.Parse(":"))(3)
                                Catch ex As Exception
                                    strHelpText = strKey
                                End Try

                            Case "login"

                                strLabelText = Localization.GetString("Login_" & strKey, LocalResourceFile)
                                strHelpText = Localization.GetString("Login_" & strKey & ".Help", LocalResourceFile)
                                strCssClass = ""

                                Select Case strKey.ToLower
                                    Case "username"

                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_UsernameForLogin

                                        If LoginWithEmail Then
                                            strLabelText = Localization.GetString("Login_Email.Text", LocalResourceFile)
                                            strHelpText = Localization.GetString("Login_Email.Help", LocalResourceFile)
                                        Else
                                            strLabelText = Localization.GetString("Login_Username.Text", LocalResourceFile)
                                            strHelpText = Localization.GetString("Login_Username.Help", LocalResourceFile)
                                        End If

                                    Case "password"

                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_PasswordForLogin
                                        strLabelText = Localization.GetString("Login_Password.Text", LocalResourceFile)
                                        strHelpText = Localization.GetString("Login_Password.Help", LocalResourceFile)

                                    Case "remember"

                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_RememberForLogin
                                        strLabelText = Localization.GetString("Login_Remember.Text", LocalResourceFile)
                                        strHelpText = Localization.GetString("Login_Remember.Help", LocalResourceFile)

                                End Select

                            Case "profile"

                                'set profile property (needed for required indicator)
                                prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey)

                                'set target control id of dnn label
                                strTargetControlId = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & prop.PropertyDefinitionId.ToString

                                'set text and helptext
                                strLabelText = Localization.GetString("ProfileProperties_" & strKey, ProfileResourcefile)
                                strHelpText = Localization.GetString("ProfileProperties_" & strKey & ".Help", ProfileResourcefile)
                                strCssClass = IIf(prop.Required, "dnnFormRequired", "")

                            Case "user"
                                'set target control id of dnn label
                                Select Case strKey.ToLower
                                    Case "username"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Username
                                    Case "email"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Email
                                    Case "displayname"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Displayname
                                    Case "firstname"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Firstname
                                    Case "lastname"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Lastname
                                    Case "passwordcurrent"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_PasswordCurrent
                                    Case "password1"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Password1
                                    Case "password2"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_Password2
                                    Case "passwordquestion"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_PasswordQuestion
                                    Case "passwordanswer"
                                        strTargetControlId = plhControls.ID & "_" & Constants.ControlId_PasswordAnswer
                                End Select

                                'set text and helptext
                                strLabelText = Localization.GetString(strKey, LocalResourceFile)
                                strHelpText = Localization.GetString(strKey & ".Help", LocalResourceFile)
                                strCssClass = "dnnFormRequired"

                                'special case: password requires setting min password length and min nonalphanumeric chars on help text
                                If strKey.ToLower = "password1" Then

                                    Dim MinLength As Integer = 0
                                    Dim MinNonAlphaNumeric As Integer = 0
                                    Try
                                        MinLength = DotNetNuke.Security.Membership.MembershipProvider.Instance().MinPasswordLength
                                    Catch
                                    End Try
                                    Try
                                        MinNonAlphaNumeric = DotNetNuke.Security.Membership.MembershipProvider.Instance().MinNonAlphanumericCharacters
                                    Catch
                                    End Try

                                    Dim strPolicy As String = String.Format(Localization.GetString("PasswordPolicy_MinLength", LocalResourceFile), MinLength.ToString)
                                    If MinNonAlphaNumeric > 0 Then
                                        strPolicy += String.Format(Localization.GetString("PasswordPolicy_MinNonAlphaNumeric", LocalResourceFile), MinNonAlphaNumeric.ToString)
                                    End If

                                    strHelpText = String.Format(Localization.GetString(strKey & ".Help", LocalResourceFile), strPolicy)

                                End If

                        End Select

                        'no resorce found, use token identifier
                        If String.IsNullOrEmpty(strLabelText) Then strLabelText = strKey
                        If String.IsNullOrEmpty(strHelpText) Then strHelpText = strKey

                        Try
                            Dim strHideRequired As String = strToken.Split(Char.Parse(":"))(3)
                            If Not String.IsNullOrEmpty(strHideRequired) Then
                                If strHideRequired.ToLower = "hiderequired" Then
                                    strCssClass = ""
                                End If
                            End If
                        Catch
                        End Try

                        If strObject.ToLower = "profile" AndAlso strObject.ToLower = "region" Then 'special case: region label is needed two times, 
                            'one for region textbox, one for region dropdown

                            Dim oControlDrop As New System.Web.UI.Control
                            oControlDrop = CType(LoadControl("~/controls/LabelControl.ascx"), DotNetNuke.UI.UserControls.LabelControl)
                            Dim dnnLabelDrop As DotNetNuke.UI.UserControls.LabelControl = CType(oControlDrop, DotNetNuke.UI.UserControls.LabelControl)
                            dnnLabelDrop.Text = strLabelText
                            dnnLabelDrop.HelpText = strHelpText
                            dnnLabelDrop.ControlName = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_DropdownSuffix & prop.PropertyDefinitionId.ToString
                            dnnLabelDrop.ID = plhControls.ID & "_RESX_" & strObject & Constants.ControlId_DropdownSuffix & "_" & strKey
                            dnnLabelDrop.CssClass = strCssClass
                            plhControls.Controls.Add(dnnLabelDrop)

                            Dim oControlText As New System.Web.UI.Control
                            oControlText = CType(LoadControl("~/controls/LabelControl.ascx"), DotNetNuke.UI.UserControls.LabelControl)
                            Dim dnnLabelText As DotNetNuke.UI.UserControls.LabelControl = CType(oControlText, DotNetNuke.UI.UserControls.LabelControl)
                            dnnLabelText.Text = strLabelText
                            dnnLabelText.HelpText = strHelpText
                            dnnLabelText.ControlName = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_TextSuffix & prop.PropertyDefinitionId.ToString
                            dnnLabelText.ID = plhControls.ID & "_RESX_" & strObject & Constants.ControlId_TextSuffix & "_" & strKey
                            dnnLabelDrop.CssClass = strCssClass
                            plhControls.Controls.Add(dnnLabelText)

                        Else

                            Dim oControl As New System.Web.UI.Control
                            oControl = CType(LoadControl("~/controls/LabelControl.ascx"), DotNetNuke.UI.UserControls.LabelControl)
                            Dim dnnLabel As DotNetNuke.UI.UserControls.LabelControl = CType(oControl, DotNetNuke.UI.UserControls.LabelControl)
                            dnnLabel.Text = strLabelText
                            dnnLabel.ControlName = strTargetControlId
                            dnnLabel.HelpText = strHelpText
                            dnnLabel.CssClass = strCssClass
                            dnnLabel.ID = plhControls.ID & "_RESX_" & strObject & "_" & strKey
                            plhControls.Controls.Add(dnnLabel)

                        End If

                    End If

                    If strToken.StartsWith("RESX:") Then 'simple localized resource rendering

                        Dim strObject As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strKey As String = strToken.Split(Char.Parse(":"))(2)
                        Dim strText As String = Localization.GetString(strKey, LocalResourceFile)

                        Dim prop As ProfilePropertyDefinition = Nothing
                        Dim strType As String = ""

                        Select Case strObject.ToLower
                            Case "profile"
                                strText = Localization.GetString("ProfileProperties_" & strKey, ProfileResourcefile)
                            Case "profilehelp"
                                strText = Localization.GetString("ProfileProperties_" & strKey & ".Help", ProfileResourcefile)
                            Case "user", "login"
                                strText = Localization.GetString(strKey, LocalResourceFile)
                            Case "userhelp", "loginhelp"
                                strText = Localization.GetString(strKey & ".Help", LocalResourceFile)
                        End Select

                        'no resorce found, use token identifier
                        If String.IsNullOrEmpty(strText) Then strText = strKey

                        Dim objLiteral As New Literal
                        objLiteral.Text = strText
                        objLiteral.ID = plhControls.ID & "_RESX_" & strObject & "_" & strKey
                        objLiteral.EnableViewState = False
                        plhControls.Controls.Add(objLiteral)

                    ElseIf strToken.StartsWith("VALUE:") Then 'render object value

                        Dim strObject As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strKey As String = strToken.Split(Char.Parse(":"))(2)
                        Dim strValue As String = ""

                        If Not objUser Is Nothing Then

                            Select Case strObject.ToLower
                                Case "profile"

                                    If strKey.ToLower = "photourl" Then
                                        strValue = objUser.Profile.PhotoURL
                                    Else
                                        strValue = objUser.Profile.GetPropertyValue(strKey)
                                    End If

                                Case "user"
                                    Select Case strKey.ToLower
                                        Case "userid"
                                            strValue = objUser.UserID
                                        Case "username"
                                            strValue = objUser.Username
                                        Case "firstname"
                                            strValue = objUser.FirstName
                                        Case "lastname"
                                            strValue = objUser.LastName
                                        Case "email"
                                            strValue = objUser.Email
                                        Case "displayname"
                                            strValue = objUser.DisplayName
                                        Case "membersince"
                                            strValue = objUser.CreatedOnDate.ToShortDateString
                                        Case "passwordquestion"
                                            strValue = objUser.Membership.PasswordQuestion
                                        Case "passwordanswer"
                                            strValue = objUser.Membership.PasswordAnswer
                                    End Select
                            End Select

                            Dim blnHideSpan As Boolean = False

                            Try
                                If strToken.Split(Char.Parse(":"))(3).ToLower = "nospan" Then
                                    blnHideSpan = True
                                End If
                            Catch
                            End Try

                            Dim ctl As New Literal
                            ctl.EnableViewState = False
                            If blnHideSpan Then
                                ctl.Text = strValue
                            Else
                                ctl.Text = "<span class=""value"">" & strValue & "</span>"
                            End If

                            plhControls.Controls.Add(ctl)


                        End If

                    ElseIf strToken.StartsWith("CTL:") Then

                        Dim strObject As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strKey As String = strToken.Split(Char.Parse(":"))(2)

                        Select Case strObject.ToLower

                            Case "login"

                                Select Case strKey.ToUpper
                                    Case "USERNAME"
                                        Dim ctl As New TextBox
                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_UsernameForLogin
                                        ctl.EnableViewState = True
                                        plhControls.Controls.Add(ctl)
                                    Case "PASSWORD"
                                        Dim ctl As New TextBox
                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_PasswordForLogin
                                        ctl.EnableViewState = True
                                        ctl.TextMode = TextBoxMode.Password
                                        plhControls.Controls.Add(ctl)
                                    Case "REMEMBER"
                                        Dim ctl As New CheckBox
                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_RememberForLogin
                                        ctl.EnableViewState = True
                                        plhControls.Controls.Add(ctl)
                                End Select

                            Case "profile"

                                Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey)
                                If Not prop Is Nothing Then
                                    AddPropertyControl(prop, plhControls, prop.Visible, objUser)
                                End If

                            Case "visibility"

                                Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey)
                                If Not prop Is Nothing Then
                                    AddVisibilityControl(prop, plhControls, prop.Visible, objUser)
                                End If

                            Case "updatebutton"

                                Dim btn As New Button
                                btn.Text = IIf(String.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile))
                                btn.ID = plhControls.ID & "_" & Constants.ControlId_UpdateButton
                                btn.CssClass = "dnnPrimaryAction"
                                plhControls.Controls.Add(btn)

                            Case "loginbutton"

                                Dim btn As New Button
                                btn.Text = IIf(String.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile))
                                btn.ID = plhControls.ID & "_" & Constants.ControlId_LoginButton
                                btn.CssClass = "dnnPrimaryAction"
                                plhControls.Controls.Add(btn)

                            Case "lostpasswordbutton"

                                Dim btn As New Button
                                btn.Text = IIf(String.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile))
                                btn.ID = plhControls.ID & "_" & Constants.ControlId_LostPasswordButton
                                btn.CssClass = "dnnSecondaryAction"
                                plhControls.Controls.Add(btn)

                            Case "resetpasswordbutton"

                                Dim btn As New Button
                                btn.Text = IIf(String.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile))
                                btn.ID = plhControls.ID & "_" & Constants.ControlId_ResetPasswordButton
                                btn.CssClass = "dnnSecondaryAction"
                                plhControls.Controls.Add(btn)

                            Case "deletebutton"

                                Dim btn As New Button
                                btn.Text = IIf(String.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile))
                                btn.ID = plhControls.ID & "_" & Constants.ControlId_DeleteButton
                                btn.CssClass = "dnnSecondaryAction"
                                plhControls.Controls.Add(btn)

                            Case "user"

                                Dim ctl As New TextBox
                                ctl.Enabled = True
                                Select Case strKey.ToUpper

                                    Case "USERNAME"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Username
                                        If Not objUser Is Nothing Then
                                            ctl.Text = Convert.ToString(objUser.Username)
                                            ctl.Enabled = False
                                        End If

                                    Case "PASSWORDCURRENT"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_PasswordCurrent
                                        ctl.TextMode = InputMode.Password

                                    Case "PASSWORD1"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Password1
                                        ctl.TextMode = InputMode.Password

                                    Case "PASSWORD2"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Password2
                                        ctl.TextMode = InputMode.Password

                                    Case "PASSWORDQUESTION"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_PasswordQuestion

                                    Case "PASSWORDANSWER"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_PasswordAnswer

                                    Case "FIRSTNAME"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Firstname
                                        If Not objUser Is Nothing Then
                                            ctl.Text = objUser.FirstName
                                        End If

                                    Case "LASTNAME"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Lastname
                                        If Not objUser Is Nothing Then
                                            ctl.Text = objUser.LastName
                                        End If

                                    Case "EMAIL"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Email
                                        If Not objUser Is Nothing Then
                                            ctl.Text = objUser.Email
                                        End If

                                    Case "DISPLAYNAME"

                                        ctl.ID = plhControls.ID & "_" & Constants.ControlId_Displayname
                                        If Not objUser Is Nothing Then
                                            ctl.Text = objUser.DisplayName
                                        End If

                                End Select

                                plhControls.Controls.Add(ctl)

                            Case "rolemembership"

                                'strKey is now supposed to be an existing role
                                Dim ctl As New CheckBox
                                ctl.ID = plhControls.ID & "_" & Constants.ControlId_RoleMembership & strKey.Replace(" ", "")
                                Try
                                    Dim strPending As String = strToken.Split(Char.Parse(":"))(3)
                                    If strPending.ToLower = "pending" Then
                                        ctl.ID += "_Pending"
                                    End If
                                Catch
                                End Try
                                ctl.Checked = False
                                plhControls.Controls.Add(ctl)

                        End Select

                    ElseIf strToken.StartsWith("RECAPTCHA:") Then

                        Dim strPublicKey As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strTheme As String = "red"
                        Try
                            strTheme = strToken.Split(Char.Parse(":"))(2)
                        Catch
                        End Try


                        Dim strProtocoll As String = "http"
                        If PortalSettings.ActiveTab.IsSecure Then
                            strProtocoll = "https"
                        End If

                        Dim strScript As New LiteralControl
                        strScript.Text = String.Format("<script type=""text/javascript"" src=""{0}://www.google.com/recaptcha/api/challenge?k={1}""></script>", strProtocoll, strPublicKey)

                        Dim pnlCaptcha As New Panel
                        pnlCaptcha.ID = plhControls.ID & "_ReCaptchaPanel"

                        If strTheme.ToLower <> "red" Then
                            Dim strOptions As String = "<script type=""text/javascript"">var RecaptchaOptions = { theme : '" & strTheme & "'};</script>"
                            pnlCaptcha.Controls.Add(New LiteralControl(strOptions))
                        End If

                        pnlCaptcha.Controls.Add(strScript)
                        plhControls.Controls.Add(pnlCaptcha)

                    ElseIf strToken.StartsWith("REQUIRED:") Then

                        Dim strObject As String = strToken.Split(Char.Parse(":"))(1)
                        Dim strKey As String = strToken.Split(Char.Parse(":"))(2)
                        Dim strId As String = ""
                        Dim blnNeedsIndicator As Boolean = False

                        Select Case strObject.ToLower
                            Case "profile"

                                Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey)
                                If Not prop Is Nothing Then
                                    If prop.Required Then
                                        strId = plhControls.ID & "_" & Constants.ControlId_PanelRequired & prop.PropertyDefinitionId.ToString
                                        blnNeedsIndicator = True
                                    End If
                                End If

                            Case "user"

                                strId = plhControls.ID & "_" & Constants.ControlId_PanelRequired & strKey
                                blnNeedsIndicator = True
                                If strKey.ToLower = "username" AndAlso (Not objUser Is Nothing) Then
                                    blnNeedsIndicator = False
                                End If

                        End Select

                        If blnNeedsIndicator Then

                            Dim pnlRequired As New Panel
                            pnlRequired.ID = strId
                            pnlRequired.CssClass = Constants.CssClass_RequiredPanel
                            pnlRequired.Visible = True
                            plhControls.Controls.Add(pnlRequired)

                        End If

                    ElseIf strToken.StartsWith("IFSOCIALMEMBERSHIPPENDING:") Then

                        Dim strRole As String = strToken.Split(Char.Parse(":"))(1)
                        Dim blnIsInRole As Boolean = False

                        If Not objUser Is Nothing Then
                            For Each objRole As UserRoleInfo In objUser.Social.Roles
                                If objRole.RoleName = strRole AndAlso objRole.Status = DotNetNuke.Security.Roles.RoleStatus.Pending Then
                                    blnIsInRole = True
                                End If
                            Next
                        End If

                        If blnIsInRole = False Then

                            While (iPtr < templateArray.Length - 1)
                                If (templateArray(iPtr + 1).ToUpper = "/IFSOCIALMEMBERSHIPPENDING:" & strRole.ToUpper) Then
                                    Exit While
                                End If
                                iPtr = iPtr + 1
                            End While
                        End If

                    ElseIf strToken.StartsWith("IFSOCIALMEMBERSHIPAPPROVED:") Then

                        Dim strRole As String = strToken.Split(Char.Parse(":"))(1)
                        Dim blnIsInRole As Boolean = False

                        If Not objUser Is Nothing Then
                            For Each objRole As UserRoleInfo In objUser.Social.Roles
                                If objRole.RoleName = strRole AndAlso objRole.Status = DotNetNuke.Security.Roles.RoleStatus.Approved Then
                                    blnIsInRole = True
                                End If
                            Next
                        End If

                        If blnIsInRole = False Then

                            While (iPtr < templateArray.Length - 1)
                                If (templateArray(iPtr + 1).ToUpper = "/IFSOCIALMEMBERSHIPAPPROVED:" & strRole.ToUpper) Then
                                    Exit While
                                End If
                                iPtr = iPtr + 1
                            End While
                        End If

                    ElseIf strToken.StartsWith("IFSOCIALMEMBERSHIPNONE:") Then

                        Dim strRole As String = strToken.Split(Char.Parse(":"))(1)
                        Dim blnIsInRole As Boolean = False

                        If Not objUser Is Nothing Then
                            For Each objRole As UserRoleInfo In objUser.Social.Roles
                                If objRole.RoleName = strRole Then
                                    blnIsInRole = True
                                End If
                            Next
                        End If

                        If blnIsInRole = True Then

                            While (iPtr < templateArray.Length - 1)
                                If (templateArray(iPtr + 1).ToUpper = "/IFSOCIALMEMBERSHIPNONE:" & strRole.ToUpper) Then
                                    Exit While
                                End If
                                iPtr = iPtr + 1
                            End While
                        End If

                    ElseIf strToken.StartsWith("IFISINROLE:") Then

                        Dim strRole As String = strToken.Split(Char.Parse(":"))(1)
                        Dim blnIsInRole As Boolean = False

                        If Not objUser Is Nothing Then
                            blnIsInRole = objUser.IsInRole(strRole)
                        End If

                        If blnIsInRole = False Then

                            While (iPtr < templateArray.Length - 1)
                                If (templateArray(iPtr + 1).ToUpper = "/IFISINROLE:" & strRole.ToUpper) Then
                                    Exit While
                                End If
                                iPtr = iPtr + 1
                            End While
                        End If

                    ElseIf strToken.StartsWith("IFNOTISINROLE:") Then

                        Dim strRole As String = strToken.Split(Char.Parse(":"))(1)
                        Dim blnIsInRole As Boolean = False

                        If Not objUser Is Nothing Then
                            blnIsInRole = objUser.IsInRole(strRole)
                        End If

                        If blnIsInRole = True Then
                            While (iPtr < templateArray.Length - 1)
                                If (templateArray(iPtr + 1).ToUpper = "/IFNOTISINROLE:" & strRole.ToUpper) Then
                                    Exit While
                                End If
                                iPtr = iPtr + 1
                            End While
                        End If

                    End If

                End If

            Next

        End Sub

        Protected Sub AddPropertyValue(ByRef plhControls As ControlCollection, ByVal ProfileProperty As ProfilePropertyDefinition, ByVal objItem As UserInfo)

            Dim strType As String = GetPropertyType(ProfileProperty.DataType)

            Select Case strType.ToLower

                Case "list"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "checkboxlist"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "country"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "date"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToDateTime(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)).ToShortDateString
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "datetime"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToDateTime(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)).ToLongDateString
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "integer"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "region"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "locale"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "file"

                    If Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) <> "" Then
                        'add view control
                        Dim objLiteral As New Literal
                        objLiteral.Text = "<a href=""" & PortalSettings.HomeDirectory & Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) & ">Herunterladen</a>"
                        objLiteral.EnableViewState = False
                        plhControls.Add(objLiteral)
                    End If

                Case "image"

                    If Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) <> "" Then
                        'add view control
                        Dim objLiteral As New Literal
                        objLiteral.Text = "<img src=""" & PortalSettings.HomeDirectory & Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) & """ alt=""" & LocalizeProperty(ProfileProperty) & """ />"
                        objLiteral.EnableViewState = False
                        plhControls.Add(objLiteral)
                    End If

                Case "richtext"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "timezone"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case "truefalse"

                    'add view control
                    Dim objLiteral As New Literal
                    If Convert.ToBoolean(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) Then
                        objLiteral.Text = "Ja"
                    Else
                        objLiteral.Text = "Nein"
                    End If

                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

                Case Else

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Add(objLiteral)

            End Select

        End Sub

        Protected Sub AddPropertyValue(ByRef plhControls As PlaceHolder, ByVal ProfileProperty As ProfilePropertyDefinition, ByVal objItem As DataRowView)

            Dim strType As String = GetPropertyType(ProfileProperty.DataType)

            Select Case strType.ToLower

                Case "list"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "checkboxlist"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "country"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = objItem(ProfileProperty.PropertyName)
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "date"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToDateTime(objItem(ProfileProperty.PropertyName)).ToShortDateString
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "datetime"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToDateTime(objItem(ProfileProperty.PropertyName)).ToLongDateString
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "integer"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "region"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "locale"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "file"

                    If Convert.ToString(objItem(ProfileProperty.PropertyName)) <> "" Then
                        'add view control
                        Dim objLiteral As New Literal
                        objLiteral.Text = "<a href=""" & PortalSettings.HomeDirectory & Convert.ToString(objItem(ProfileProperty.PropertyName)) & ">Herunterladen</a>"
                        objLiteral.EnableViewState = False
                        plhControls.Controls.Add(objLiteral)
                    End If

                Case "image"

                    If Convert.ToString(objItem(ProfileProperty.PropertyName)) <> "" Then
                        'add view control
                        Dim objLiteral As New Literal
                        objLiteral.Text = "<img src=""" & PortalSettings.HomeDirectory & Convert.ToString(objItem(ProfileProperty.PropertyName)) & """ alt=""" & LocalizeProperty(ProfileProperty) & """ />"
                        objLiteral.EnableViewState = False
                        plhControls.Controls.Add(objLiteral)
                    End If

                Case "richtext"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "timezone"

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case "truefalse"

                    'add view control
                    Dim objLiteral As New Literal
                    If Convert.ToBoolean(objItem(ProfileProperty.PropertyName)) Then
                        objLiteral.Text = "Ja"
                    Else
                        objLiteral.Text = "Nein"
                    End If

                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

                Case Else

                    'add view control
                    Dim objLiteral As New Literal
                    objLiteral.Text = Convert.ToString(objItem(ProfileProperty.PropertyName))
                    objLiteral.EnableViewState = False
                    plhControls.Controls.Add(objLiteral)

            End Select

        End Sub

        'Protected Sub AddVisibilityControl(ByVal ProfileAttribute As ProfilePropertyDefinition, ByRef plhControls As PlaceHolder, ByVal IsEnabled As Boolean, ByVal objUser As UserInfo)

        '    Dim drp As New DotNetNuke.UI.WebControls.VisibilityControl
        '    drp.User = objUser
        '    drp.Value = objUser.Profile.GetProperty(ProfileAttribute.PropertyName).ProfileVisibility
        '    drp.ID = plhControls.ID & "_" & Constants.ControlId_Visiblity & ProfileAttribute.PropertyDefinitionId.ToString

        '    plhControls.Controls.Add(drp)

        'End Sub

        Protected Sub AddVisibilityControl(ByVal ProfileAttribute As ProfilePropertyDefinition, ByRef plhControls As PlaceHolder, ByVal IsEnabled As Boolean, ByVal objUser As UserInfo)

            Dim drp As New DropDownList
            drp.ID = plhControls.ID & "_" & Constants.ControlId_Visiblity & ProfileAttribute.PropertyDefinitionId.ToString
            drp.CssClass = "ctlProfileVisibility"
            drp.Items.Add(New ListItem(Localization.GetString("VisibilitySelect", LocalResourceFile), "-1"))
            drp.Items.Add(New ListItem(Localization.GetString("VisibilityAdminOnly", LocalResourceFile), DotNetNuke.Entities.Users.UserVisibilityMode.AdminOnly))
            drp.Items.Add(New ListItem(Localization.GetString("VisibilityMembersOnly", LocalResourceFile), DotNetNuke.Entities.Users.UserVisibilityMode.MembersOnly))
            drp.Items.Add(New ListItem(Localization.GetString("VisibilityFriendsAndGroups", LocalResourceFile), DotNetNuke.Entities.Users.UserVisibilityMode.FriendsAndGroups))
            drp.Items.Add(New ListItem(Localization.GetString("VisibilityAllUsers", LocalResourceFile), DotNetNuke.Entities.Users.UserVisibilityMode.AllUsers))

            Try
                Dim userProperty As ProfilePropertyDefinition = objUser.Profile.GetProperty(ProfileAttribute.PropertyName)
                If String.IsNullOrEmpty(userProperty.PropertyValue) Then
                    drp.SelectedValue = ProfileAttribute.DefaultVisibility
                Else
                    drp.SelectedValue = userProperty.ProfileVisibility.VisibilityMode
                End If
            Catch
            End Try

            plhControls.Controls.Add(drp)

        End Sub

        Protected Sub AddPropertyControl(ByVal ProfileAttribute As ProfilePropertyDefinition, ByRef plhControls As PlaceHolder, ByVal IsEnabled As Boolean, ByVal objUser As UserInfo)

            Dim strType As String = GetPropertyType(ProfileAttribute.DataType)

            Select Case strType.ToLower.Trim
                Case "list"

                    Dim drp As New DropDownList
                    drp.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    drp.Attributes.Add("ParentId", plhControls.ID)
                    Dim lc As New Lists.ListController
                    drp.DataTextField = "Text"
                    drp.DataValueField = "Value"
                    drp.DataSource = lc.GetListEntryInfoItems(ProfileAttribute.PropertyName)
                    drp.DataBind()

                    Try
                        drp.SelectedValue = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)
                    Catch
                    End Try

                    drp.Enabled = IsEnabled
                    'drp.EnableAjaxSkinRendering = True
                    plhControls.Controls.Add(drp)

                Case "checkboxlist"

                    Dim chklist As New CheckBoxList
                    chklist.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    chklist.Attributes.Add("ParentId", plhControls.ID)
                    Dim lc As New Lists.ListController
                    chklist.DataTextField = "Text"
                    chklist.DataValueField = "Value"
                    chklist.DataSource = lc.GetListEntryInfoItems(ProfileAttribute.PropertyName)
                    chklist.DataBind()

                    Try
                        Dim values() As String = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName).Split("|")
                        For Each item As String In values
                            If chklist.Items.FindByValue(item) IsNot Nothing Then
                                chklist.Items.FindByValue(item).Selected = True
                            End If
                        Next
                        chklist.SelectedValue = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)
                    Catch
                    End Try

                    chklist.Enabled = IsEnabled
                    plhControls.Controls.Add(chklist)

                Case "country"

                    Dim ctl As New DropDownList
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.Attributes.Add("ParentId", plhControls.ID)

                    Dim lc As New Lists.ListController
                    Dim entries As System.Collections.Generic.IEnumerable(Of Lists.ListEntryInfo) = lc.GetListEntryInfoItems("Country")
                    For Each ListEntryInfo In entries
                        ctl.Items.Add(New ListItem(ListEntryInfo.Text, ListEntryInfo.Value))
                    Next
                    Try
                        ctl.Items.FindByText(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)).Selected = True
                    Catch
                        ctl.Items(0).Selected = True
                    End Try

                    ctl.Enabled = IsEnabled
                    ctl.AutoPostBack = True

                    AddHandler ctl.SelectedIndexChanged, AddressOf drpCountry_SelectedIndexChanged

                    plhControls.Controls.Add(ctl)

                Case "region"

                    Dim ctlDrop As New DropDownList
                    ctlDrop.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_DropdownSuffix & ProfileAttribute.PropertyDefinitionId.ToString
                    ctlDrop.Attributes.Add("ParentId", plhControls.ID)
                    'ctlDrop.EnableAjaxSkinRendering = True
                    ctlDrop.Enabled = IsEnabled
                    ctlDrop.Visible = False

                    Dim ctlText As New TextBox
                    ctlText.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_TextSuffix & ProfileAttribute.PropertyDefinitionId.ToString
                    ctlText.Enabled = IsEnabled
                    ctlText.Attributes.Add("ParentId", plhControls.ID)
                    ctlText.Visible = False

                    Dim drpCountry As DropDownList = Nothing
                    Dim strCountry As String = ""
                    Dim propCountry As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Country")
                    If Not propCountry Is Nothing Then

                        Dim obj As Control = FindControlRecursive(plhControls, plhControls.ID & "_" & Constants.ControlId_ProfileProperty & propCountry.PropertyDefinitionId.ToString)
                        If Not obj Is Nothing Then
                            drpCountry = CType(obj, DropDownList)
                            If Not drpCountry Is Nothing Then
                                strCountry = drpCountry.SelectedItem.Text
                            End If
                        End If

                    End If

                    Dim country As Lists.ListEntryInfo = Nothing

                    Dim lc As New Lists.ListController

                    Dim entries As System.Collections.Generic.IEnumerable(Of Lists.ListEntryInfo) = Nothing
                    Dim countries As System.Collections.Generic.IEnumerable(Of Lists.ListEntryInfo) = lc.GetListEntryInfoItems("Country")

                    If Not countries Is Nothing Then
                        For Each checkCountry As Lists.ListEntryInfo In countries
                            If checkCountry.Text = strCountry Then
                                country = checkCountry
                                Exit For
                            End If
                        Next
                    End If

                    If Not country Is Nothing Then
                        entries = lc.GetListEntryInfoItems("Region", "Country." & country.Value)
                    End If

                    Dim blnHasEntries As Boolean = False
                    If Not entries Is Nothing Then
                        For Each entry As Lists.ListEntryInfo In entries
                            ctlDrop.Items.Add(New ListItem(entry.Text, entry.Value))
                            blnHasEntries = True
                        Next
                    End If

                    Try
                        ctlDrop.Items.FindByText(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)).Selected = True
                    Catch
                    End Try
                    ctlDrop.Visible = True
                    ctlText.Visible = False

                    If blnHasEntries = False Then
                        Try
                            ctlText.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                        Catch
                        End Try
                        ctlText.Visible = True
                        ctlDrop.Visible = False
                    End If

                    plhControls.Controls.Add(ctlDrop)
                    plhControls.Controls.Add(ctlText)

                Case "date"

                    Dim ctl As New RadDatePicker
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.MinDate = New Date(1900, 1, 1)
                    ctl.MaxDate = New Date(2100, 12, 31)

                    Try
                        ctl.SelectedDate = Convert.ToDateTime(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled
                    ctl.EnableAjaxSkinRendering = True
                    plhControls.Controls.Add(ctl)

                Case "datetime"

                    Dim ctl As New RadDateTimePicker
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.MinDate = New Date(1900, 1, 1)
                    ctl.MaxDate = New Date(2100, 12, 31)
                    Try
                        ctl.SelectedDate = Convert.ToDateTime(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled
                    ctl.EnableAjaxSkinRendering = True

                    plhControls.Controls.Add(ctl)

                Case "integer"

                    Dim ctl As New RadNumericTextBox
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    Try
                        ctl.Value = Convert.ToDouble(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled
                    ctl.EnableAjaxSkinRendering = True
                    ctl.MaxLength = ProfileAttribute.Length
                    plhControls.Controls.Add(ctl)

                Case "locale"

                    Dim ctl As New DropDownList

                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.Page = Me.Page
                    ctl.Enabled = IsEnabled

                    ctl.DataValueField = "Name"
                    ctl.DataTextField = "NativeName"

                    ctl.DataSource = LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(PortalId))
                    ctl.DataBind()

                    Try
                        If Not String.IsNullOrEmpty(Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))) Then
                            ctl.SelectedValue = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                        End If
                    Catch
                    End Try

                    plhControls.Controls.Add(ctl)

                Case "image"

                    Dim ctl As New DotNetNuke.Web.UI.WebControls.DnnImageEditControl
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.User = objUser
                    If IsEnabled Then
                        ctl.EditMode = UI.WebControls.PropertyEditorMode.Edit
                    Else
                        ctl.EditMode = UI.WebControls.PropertyEditorMode.View
                    End If

                    Try
                        ctl.Value = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)
                    Catch
                    End Try

                    ctl.DataBind()

                    plhControls.Controls.Add(ctl)

                Case "file"

                    Dim ctl As New DotNetNuke.Web.UI.WebControls.DnnFileEditControl
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    ctl.User = objUser
                    If IsEnabled Then
                        ctl.EditMode = UI.WebControls.PropertyEditorMode.Edit
                    Else
                        ctl.EditMode = UI.WebControls.PropertyEditorMode.View
                    End If

                    Try
                        ctl.Value = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)
                    Catch
                    End Try

                    plhControls.Controls.Add(ctl)

                Case "richtext", "multi-line text"

                    Dim ctl As New TextBox
                    ctl.TextMode = InputMode.MultiLine
                    ctl.Rows = 8
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    Try
                        ctl.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled
                    ctl.MaxLength = ProfileAttribute.Length
                    plhControls.Controls.Add(ctl)

                Case "timezone", "timezoneinfo"

                    Dim ctl As New DnnTimeZoneComboBox
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    Try
                        If Not String.IsNullOrEmpty(Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))) Then
                            ctl.SelectedValue = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                        End If
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled

                    plhControls.Controls.Add(ctl)

                Case "truefalse", "checkbox"

                    Dim ctl As New CheckBox
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    Try
                        ctl.Checked = Convert.ToBoolean(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try

                    plhControls.Controls.Add(ctl)

                Case Else

                    Dim ctl As New TextBox
                    ctl.ID = plhControls.ID & "_" & Constants.ControlId_ProfileProperty & ProfileAttribute.PropertyDefinitionId.ToString
                    Try
                        ctl.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))
                    Catch
                    End Try
                    ctl.Enabled = IsEnabled
                    ctl.MaxLength = ProfileAttribute.Length

                    plhControls.Controls.Add(ctl)

            End Select

        End Sub

        Public Sub UpdateProfileProperties(ByRef Container As Control, ByRef oUser As UserInfo, ByRef propertiesCollection As ProfilePropertyDefinitionCollection, Properties As List(Of String))
            Dim strUpdated As String = ""
            UpdateProfileProperties(Container, oUser, propertiesCollection, strUpdated, Properties)
        End Sub

        Private Function GetVisibilityMode(ByVal ProfProperty As ProfilePropertyDefinition, ByRef objControl As Control) As UserVisibilityMode

            Dim ctlDrop As DropDownList = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_Visiblity & ProfProperty.PropertyDefinitionId.ToString)
            If Not ctlDrop Is Nothing Then
                Select Case ctlDrop.SelectedValue
                    Case "2"
                        Return UserVisibilityMode.AdminOnly
                    Case "0"
                        Return UserVisibilityMode.AllUsers
                    Case "3"
                        Return UserVisibilityMode.FriendsAndGroups
                    Case "1"
                        Return UserVisibilityMode.MembersOnly
                    Case Else
                        Return ProfProperty.DefaultVisibility
                End Select
            End If

            Return ProfProperty.DefaultVisibility

        End Function

        Public Sub UpdateProfileProperties(ByRef Container As Control, ByRef oUser As UserInfo, ByRef propertiesCollection As ProfilePropertyDefinitionCollection, ByRef strUpdated As String, Properties As List(Of String))

            Dim oldAccount As UserInfo = oUser

            'loop trough dynamic profile attributes and set those
            For Each itemProp As String In Properties
                Try
                    Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalId, itemProp.Substring(2))
                    If Not prop Is Nothing Then

                        Dim ctl As Control = GetPropertyControl(prop, Container)
                        If Not ctl Is Nothing Then
                            If TypeOf (ctl) Is DropDownList Then

                                Dim value As String = CType(ctl, DropDownList).SelectedValue.Trim

                                If prop.PropertyName.ToLower = "region" Then
                                    value = CType(ctl, DropDownList).SelectedItem.Text.Trim
                                End If
                                If prop.PropertyName.ToLower = "country" Then
                                    value = CType(ctl, DropDownList).SelectedItem.Text.Trim
                                End If

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is CheckBoxList Then

                                Dim chklist As CheckBoxList = CType(ctl, CheckBoxList)
                                Dim value As String = ""

                                For Each chk As ListItem In chklist.Items
                                    If chk.Selected Then
                                        value += "|" + chk.Value
                                    End If
                                Next
                                If value <> "" Then value = value.Substring(1)

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDateTimePicker Then

                                Dim value As String = CType(ctl, Telerik.Web.UI.RadDateTimePicker).DbSelectedDate.ToString

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadTimePicker Then

                                Dim value As String = CType(ctl, Telerik.Web.UI.RadTimePicker).DbSelectedDate.ToString.Trim

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDatePicker Then

                                Dim value As String = CType(ctl, Telerik.Web.UI.RadDatePicker).DateInput.DbSelectedDate.ToString.Trim

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is CheckBox Then

                                Dim value As String = CType(ctl, CheckBox).Checked.ToString

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is TextBox Then

                                Dim value As String = CType(ctl, TextBox).Text.Trim

                                Dim oldValue As String = oldAccount.Profile.GetPropertyValue(prop.PropertyName)
                                If oldValue <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadNumericTextBox Then

                                Dim value As String = CType(ctl, Telerik.Web.UI.RadNumericTextBox).Value.ToString

                                If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
                                    Dim strProperty As String = prop.PropertyName
                                    If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
                                        strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
                                    End If
                                    strUpdated += strProperty & ", "
                                End If

                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox Then

                                Dim value As String = CType(ctl, DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox).SelectedValue
                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnImageEditControl Then

                                Dim value As String = CType(ctl, DotNetNuke.Web.UI.WebControls.DnnImageEditControl).Value
                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnFileEditControl Then

                                Dim value As String = CType(ctl, DotNetNuke.Web.UI.WebControls.DnnFileEditControl).Value
                                prop = oUser.Profile.GetProperty(prop.PropertyName)
                                prop.PropertyValue = value
                                Dim objVisibility As New ProfileVisibility()
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, Container)
                                prop.ProfileVisibility = objVisibility
                                propertiesCollection.Add(prop)

                            End If
                        End If

                    End If
                Catch
                End Try
            Next

        End Sub

        'Public Sub UpdateProfileProperties(ByRef Container As Control, ByRef oUser As UserInfo, ByRef strUpdated As String, Properties As List(Of String))

        '    Dim oldAccount As UserInfo = oUser

        '    Dim propertiesCollection As New ProfilePropertyDefinitionCollection


        '    'loop trough dynamic profile attributes and set those
        '    For Each itemProp As String In Properties
        '        Try
        '            Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalId, itemProp.Substring(2))
        '            If Not prop Is Nothing Then

        '                Dim ctl As Control = GetPropertyControl(prop, Container)
        '                If Not ctl Is Nothing Then
        '                    If TypeOf (ctl) Is DropDownList Then

        '                        Dim value As String = CType(ctl, DropDownList).SelectedValue.Trim


        '                        If prop.PropertyName.ToLower = "region" Then
        '                            value = CType(ctl, DropDownList).SelectedItem.Text.Trim
        '                        End If
        '                        If prop.PropertyName.ToLower = "country" Then
        '                            value = CType(ctl, DropDownList).SelectedItem.Text.Trim
        '                        End If

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDateTimePicker Then

        '                        Dim value As String = CType(ctl, Telerik.Web.UI.RadDateTimePicker).DbSelectedDate.ToString

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadTimePicker Then

        '                        Dim value As String = CType(ctl, Telerik.Web.UI.RadTimePicker).DbSelectedDate.ToString.Trim

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDatePicker Then

        '                        Dim value As String = CType(ctl, Telerik.Web.UI.RadDatePicker).DateInput.DbSelectedDate.ToString.Trim

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is CheckBox Then

        '                        Dim value As String = CType(ctl, CheckBox).Checked.ToString

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)


        '                    ElseIf TypeOf (ctl) Is TextBox Then

        '                        Dim value As String = CType(ctl, TextBox).Text.Trim

        '                        Dim oldValue As String = oldAccount.Profile.GetPropertyValue(prop.PropertyName)
        '                        If oldValue <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadNumericTextBox Then

        '                        Dim value As String = CType(ctl, Telerik.Web.UI.RadNumericTextBox).Value.ToString

        '                        If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        '                            Dim strProperty As String = prop.PropertyName
        '                            If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        '                                strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        '                            End If
        '                            strUpdated += strProperty & ", "
        '                        End If

        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        '                    ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox Then
        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox).SelectedValue)

        '                    ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnImageEditControl Then
        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnImageEditControl).Value)

        '                    ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnFileEditControl Then
        '                        oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnFileEditControl).Value)

        '                    End If
        '                End If

        '            End If
        '        Catch
        '        End Try
        '    Next

        'End Sub

        Public Sub ManageCountryDropdown(ByRef Container As Control)

        End Sub

        Public Sub ManageRegionLabel(ByRef Container As Control)

            'we need to check for double labels in region control, if that is on the page

            Dim ctlRegionDrop As Control = Nothing
            Dim ctlRegionText As Control = Nothing

            Dim propRegion As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Region")
            If Not propRegion Is Nothing Then
                ctlRegionDrop = FindControlRecursive(Me.Page, Container.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_DropdownSuffix & propRegion.PropertyDefinitionId.ToString)
                ctlRegionText = FindControlRecursive(Me.Page, Container.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_TextSuffix & propRegion.PropertyDefinitionId.ToString)
            End If

            Dim objControlForDropdown As Control = Nothing
            Dim objLabelForDropdown As DotNetNuke.UI.UserControls.LabelControl = Nothing
            Dim lblDropdownId As String = Container.ID & "_RESX_PROFILE" & Constants.ControlId_DropdownSuffix & "_" & propRegion.PropertyName
            objControlForDropdown = FindControlRecursive(Container, lblDropdownId)
            If Not objControlForDropdown Is Nothing Then
                If TypeOf objControlForDropdown Is DotNetNuke.UI.UserControls.LabelControl Then
                    objLabelForDropdown = CType(objControlForDropdown, DotNetNuke.UI.UserControls.LabelControl)
                End If
            End If

            Dim objControlForTextbox As Control = Nothing
            Dim objLabelForTextbox As DotNetNuke.UI.UserControls.LabelControl = Nothing
            Dim lblTextboxId As String = Container.ID & "_RESX_PROFILE" & Constants.ControlId_TextSuffix & "_" & propRegion.PropertyName
            objControlForTextbox = FindControlRecursive(Container, lblTextboxId)
            If Not objControlForTextbox Is Nothing Then
                If TypeOf objControlForTextbox Is DotNetNuke.UI.UserControls.LabelControl Then
                    objLabelForTextbox = CType(objControlForTextbox, DotNetNuke.UI.UserControls.LabelControl)
                End If
            End If

            If Not ctlRegionDrop Is Nothing Then
                If ctlRegionDrop.Visible = True Then
                    If Not objLabelForDropdown Is Nothing Then objLabelForDropdown.Visible = True
                    If Not objLabelForTextbox Is Nothing Then objLabelForTextbox.Visible = False
                Else
                    If Not objLabelForDropdown Is Nothing Then objLabelForDropdown.Visible = False
                    If Not objLabelForTextbox Is Nothing Then objLabelForTextbox.Visible = True
                End If
            End If

            If Not ctlRegionText Is Nothing Then
                If ctlRegionText.Visible = True Then
                    If Not objLabelForDropdown Is Nothing Then objLabelForDropdown.Visible = False
                    If Not objLabelForTextbox Is Nothing Then objLabelForTextbox.Visible = True
                Else
                    If Not objLabelForDropdown Is Nothing Then objLabelForDropdown.Visible = True
                    If Not objLabelForTextbox Is Nothing Then objLabelForTextbox.Visible = False
                End If
            End If

            If ctlRegionDrop Is Nothing AndAlso ctlRegionText Is Nothing Then
                Dim propCountry As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Country")
                If Not propCountry Is Nothing Then
                    Dim ctlDropCountry As Control = FindControlRecursive(Me.Page, Container.ID & "_" & Constants.ControlId_ProfileProperty & propCountry.PropertyDefinitionId.ToString)
                    If Not ctlDropCountry Is Nothing Then
                        CType(ctlDropCountry, DropDownList).AutoPostBack = False
                    End If
                End If
            End If

        End Sub

        Protected Sub drpCountry_SelectedIndexChanged(ByVal o As Object, ByVal e As System.EventArgs)

            Dim drpCountry As DropDownList = CType(o, DropDownList)
            Dim objParent As String = drpCountry.Attributes("ParentId")

            Dim strCountry As String = drpCountry.Text

            Dim country As Lists.ListEntryInfo = Nothing

            Dim lc As New Lists.ListController

            Dim entries As System.Collections.Generic.IEnumerable(Of Lists.ListEntryInfo) = Nothing
            Dim countries As System.Collections.Generic.IEnumerable(Of Lists.ListEntryInfo) = lc.GetListEntryInfoItems("Country")

            For Each checkCountry As Lists.ListEntryInfo In countries
                If checkCountry.Text = strCountry Then
                    country = checkCountry
                    Exit For
                End If
            Next

            If Not country Is Nothing Then
                entries = lc.GetListEntryInfoItems("Region", "Country." & country.Value)
            End If

            Dim blnHasEntries As Boolean = False


            Dim ctlRegionDrop As Control = Nothing
            Dim ctlRegionText As Control = Nothing

            Dim propRegion As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Region")
            If Not propRegion Is Nothing Then

                ctlRegionDrop = FindControlRecursive(Me.Page, objParent & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_DropdownSuffix & propRegion.PropertyDefinitionId.ToString)
                ctlRegionText = FindControlRecursive(Me.Page, objParent & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_TextSuffix & propRegion.PropertyDefinitionId.ToString)

            End If

            If Not ctlRegionDrop Is Nothing AndAlso Not entries Is Nothing Then
                ctlRegionDrop.Visible = True
                CType(ctlRegionDrop, DropDownList).Items.Clear()
                For Each entry As Lists.ListEntryInfo In entries
                    CType(ctlRegionDrop, DropDownList).Items.Add(New ListItem(entry.Text, entry.Value))
                    blnHasEntries = True
                Next
            End If

            If Not ctlRegionText Is Nothing Then
                ctlRegionText.Visible = False
            End If

            If blnHasEntries = False Then
                If Not ctlRegionDrop Is Nothing Then
                    ctlRegionDrop.Visible = False
                End If
                If Not ctlRegionText Is Nothing Then
                    ctlRegionText.Visible = True
                End If
            End If

        End Sub

        Protected Function GetPropertyControl(ByVal ProfProperty As ProfilePropertyDefinition, ByRef objControl As Control) As Control

            Dim strType As String = GetPropertyType(ProfProperty.DataType)
            Select Case strType.ToLower

                Case "region"

                    Dim ctlDrop As DropDownList = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_DropdownSuffix & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctlDrop Is Nothing Then
                        If ctlDrop.Visible Then
                            Return ctlDrop
                        End If
                    End If

                    Dim ctlText As TextBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & Constants.ControlId_TextSuffix & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctlText Is Nothing Then
                        Return ctlText
                    End If

                Case "list", "country", "locale"

                    Dim ctl As DropDownList = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "checkboxlist"

                    Dim ctl As CheckBoxList = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "timezone", "timezoneinfo"

                    Dim ctl As DnnTimeZoneComboBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "integer"

                    Dim ctl As Telerik.Web.UI.RadNumericTextBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "richtext", "multi-line text"

                    Dim ctl As TextBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "truefalse", "checkbox"

                    Dim ctl As CheckBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "date"

                    Dim ctl As Telerik.Web.UI.RadDatePicker = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "datetime"

                    Dim ctl As Telerik.Web.UI.RadDateTimePicker = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "image"

                    Dim ctl As DotNetNuke.Web.UI.WebControls.DnnImageEditControl = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case "file"

                    Dim ctl As DotNetNuke.Web.UI.WebControls.DnnFileEditControl = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

                Case Else

                    Dim ctl As TextBox = objControl.FindControl(objControl.ID & "_" & Constants.ControlId_ProfileProperty & ProfProperty.PropertyDefinitionId.ToString)
                    If Not ctl Is Nothing Then
                        Return ctl
                    End If

            End Select

            Return Nothing

        End Function

        Protected Sub AddSuccessIndicator(ByVal Attribute As String, ByRef objControl As Control)

            Dim pnlRequired As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelRequired & Attribute), Panel)
            If Not pnlRequired Is Nothing Then
                pnlRequired.CssClass = Constants.CssClass_SuccessPanel
            End If

            'Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            'If Not pnlError Is Nothing Then
            '    pnlError.Visible = False
            'End If

            'Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            'If Not pnlSucess Is Nothing Then
            '    pnlSucess.Visible = True
            'End If

        End Sub

        Protected Sub AddErrorIndicator(ByVal Attribute As String, ByRef objControl As Control)

            Dim pnlRequired As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelRequired & Attribute), Panel)
            If Not pnlRequired Is Nothing Then
                pnlRequired.CssClass = Constants.CssClass_ErrorPanel
            End If

            'Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            'If Not pnlError Is Nothing Then
            '    pnlError.Visible = True
            'End If

            'Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            'If Not pnlSucess Is Nothing Then
            '    pnlSucess.Visible = False
            'End If

        End Sub

        Protected Sub RemoveErrorIndicator(ByVal Attribute As String, ByRef objControl As Control, ByVal IsRequired As Boolean)

            Dim pnlRequired As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelRequired & Attribute), Panel)
            If Not pnlRequired Is Nothing Then
                pnlRequired.CssClass = Constants.CssClass_RequiredPanel
            End If

            'Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            'If Not pnlError Is Nothing Then
            '    pnlError.Visible = False
            'End If

            'Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            'If Not pnlSucess Is Nothing Then
            '    pnlSucess.Visible = False
            'End If

        End Sub

        Protected Function GetPropertiesFromTempate(ByVal Template As String) As List(Of String)

            Dim lstProperties As New List(Of String)

            Dim delimStr As String = "[]"
            Dim delimiter As Char() = delimStr.ToCharArray()

            Dim templateArray As String()
            templateArray = Template.Split(delimiter)

            For iPtr As Integer = 0 To templateArray.Length - 1 Step 2

                If iPtr < templateArray.Length - 1 Then

                    Dim strToken As String = templateArray(iPtr + 1)

                    If strToken.StartsWith("CTL:") Then

                        Dim strControlToken As String = ""
                        Try
                            strControlToken = strToken.Substring(4, strToken.Length - 4)
                        Catch
                        End Try

                        Dim strType As String = ""
                        Try
                            strType = strControlToken.Substring(0, strControlToken.IndexOf(":"))
                        Catch
                        End Try

                        Dim strProperty As String = ""
                        Try
                            strProperty = strControlToken.Substring(strControlToken.IndexOf(":") + 1)
                        Catch
                        End Try

                        If strType.ToUpper = "PROFILE" Then

                            lstProperties.Add("P:" & strProperty)

                        ElseIf strType.ToUpper = "USER" Then

                            lstProperties.Add("U:" & strProperty)

                        End If

                    End If

                End If

            Next

            Return lstProperties

        End Function

        Public Function GetTempFolderPath(ByVal PropertyName As String) As String

            Dim strPath As String = ResolveUrl("~/App_Data/dnnWerk.Users/")
            If Not System.IO.Directory.Exists(Server.MapPath(strPath)) Then
                System.IO.Directory.CreateDirectory(Server.MapPath(strPath))
            End If

            strPath = ResolveUrl("~/App_Data/dnnWerk.Users/" & PropertyName)
            If Not System.IO.Directory.Exists(Server.MapPath(strPath)) Then
                System.IO.Directory.CreateDirectory(Server.MapPath(strPath))
            End If

            Return strPath & "/"

        End Function

#End Region

#Region "Localization Utilities"

        Protected Function LocalizeProperty(ByVal prop As ProfilePropertyDefinition) As String
            Dim strText As String = prop.PropertyName
            Try
                strText = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
            Catch
            End Try
            Return strText
        End Function

        Protected Function LocalizePropertyHelp(ByVal prop As ProfilePropertyDefinition) As String
            Dim strText As String = prop.PropertyName
            Try
                strText = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Help", ProfileResourcefile)
            Catch
            End Try
            Return strText
        End Function

        Protected Function LocalizePropertyCategory(ByVal prop As ProfilePropertyDefinition) As String
            Dim strText As String = prop.PropertyCategory
            Try
                strText = Localization.GetString("ProfileProperties_" & prop.PropertyCategory & ".Header", ProfileResourcefile)
            Catch
            End Try
            Return strText
        End Function

#End Region

    End Class
End Namespace


